name: Bump And Build Version

on:
  push:
    branches:
      - main

jobs:
  quality-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 16.0.2+7

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Get Repository Name
        id: slugrepo
        run: echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)"

      - name: Run tests
        run: GRADLE_OPTS='-Xms256m -Xmx1024m' SPRING_PROFILES_ACTIVE=integration ./gradlew clean test ktlintCheck sonarqube --info
        env:
          SONAR_KEY: ${{ steps.slugrepo.outputs.repo }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_PACKAGES_USERNAME: ${{ secrets.GH_PACKAGES_USERNAME }}
          GH_PACKAGES_PASSWORD: ${{ secrets.GH_PACKAGES_PASSWORD }}

  release:
    needs: quality-code
    runs-on: ubuntu-latest
    outputs:
      tagversion: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Checkout private actions
        uses: actions/checkout@v2
        with:
          repository: ContaQuanto/github-actions-pipeline-ci
          path: github-actions-pipeline-ci
          ref: 'main'
          token: ${{ secrets.QUANTOBOT_CICD_GH_TOKEN }}
          ssh-key: ${{ secrets.QUANTOBOT_CICD_SSH_PRIVATE_KEY }}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.QUANTOBOT_CICD_AWS_ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.QUANTOBOT_CICD_AWS_ECR_SECRET_KEY }}
          aws-region: us-east-2

      - name: AWS ECR Login
        uses: aws-actions/amazon-ecr-login@v1

      - name: SSH agent
        uses: quan-to/actions-ssh-agent@893c4c419a07d7826bfe0178340cf03eadcf5f11
        with:
          ssh-private-key: ${{ secrets.QUANTOBOT_CICD_SSH_PRIVATE_KEY }}

      - name: Git config
        uses: ./github-actions-pipeline-ci/gitConfig

      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 16.0.2+7

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Get Repository Name
        id: slugrepo
        run: echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)"

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Build Kotlin V2
        uses: ./github-actions-pipeline-ci/buildKotlinV2
        with:
          docker_image_name: ${{ steps.slugrepo.outputs.repo }}
          docker_image_version: ${{ steps.tag_version.outputs.new_tag }}
          docker_ecr_repo: 994502714310.dkr.ecr.us-east-2.amazonaws.com
        env:
          BUILD_TAG_VERSION: ${{ steps.tag_version.outputs.new_tag }}
          GH_PACKAGES_USERNAME: ${{ secrets.GH_PACKAGES_USERNAME }}
          GH_PACKAGES_PASSWORD: ${{ secrets.GH_PACKAGES_PASSWORD }}

      - name: Push ECR Image
        uses: ./github-actions-pipeline-ci/ecrPush
        with:
          aws_ecr_url: 994502714310.dkr.ecr.us-east-2.amazonaws.com
          aws_ecr_image: ${GITHUB_REPOSITORY#*/}

  deploy-sandbox:
    needs: release
    runs-on: ubuntu-latest
    environment:
      name: sandbox
      url: https://argocd.sbx-akron.k8s.sbx.contaquanto.net/applications

    steps:
      - name: Get Repository Name
        id: slugrepo
        run: echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)"

      - name: Write ArgoCD ConfigFile
        id: argocd_config
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'argocd.conf'
          encodedString: ${{ secrets.ARGOCD_CONF_B64_TSP_SBX }}

      - name: ArgoCD Set Command
        uses: clowdhaus/argo-cd-action/@main
        with:
          version: 2.0.0
          command: app set ${{ steps.slugrepo.outputs.repo }} -p image.tag=${{ needs.release.outputs.tagversion }}
          options: --config ${{ steps.argocd_config.outputs.filePath }}

      - name: ArgoCD Sync Command
        uses: clowdhaus/argo-cd-action/@main
        with:
          version: 2.0.0
          command: app sync ${{ steps.slugrepo.outputs.repo }}
          options: --config ${{ steps.argocd_config.outputs.filePath }}
