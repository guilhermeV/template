version: '3.3'

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - 'kafka'

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - 'kafka'

  postgres:
    container_name: template-database
    image: "postgres:13.2-alpine"
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: [
          "CMD",
          "pg_isready",
          "-h", "localhost",
          "-U", "templateuser",
          "-d", "template"
      ]
      interval: 30s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=templateuser
      - POSTGRES_PASSWORD=templatepassword
      - POSTGRES_DB=template
    networks:
      - 'postgres'

  vault:
    image: vault:1.7.3
    container_name: vault
    ports:
      - "8300:8300"
    restart: always
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/logs:/vault/logs
      - ./vault/file:/vault/file
      - ./vault/files:/vault/files
      - ./vault/config:/vault/config
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=token123
      - VAULT_TOKEN=token123
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8300
    command: [ "vault", "server", "-dev", ">/dev/null" ]
    networks:
      - 'postgres'
    depends_on:
      - postgres

  vault_disabler:
    image: vault:1.7.3
    container_name: vault_disabler
    command: [ "vault", "secrets", "disable", "secret" ]
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault

  vault_enabler:
    image: vault:1.7.3
    container_name: vault_enabler
    cap_add:
      - IPC_LOCK
    command: [ "vault", "secrets", "enable", "-version=1", "-path=secret", "kv" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_disabler

  vault_policies:
    image: vault:1.7.3
    container_name: vault_policies
    volumes:
      - ./vault/config:/vault/config
    cap_add:
      - IPC_LOCK
    command: [ "vault" , "policy", "write", "order" , "/vault/config/policies.hcl" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_enabler

  vault_database_enabler:
    image: vault:1.7.3
    container_name: vault_database_enabler
    command: [ "vault", "secrets", "enable", "database" ]
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_policies

  vault_database_connection:
    image: vault:1.7.3
    container_name: vault_database_connection
    cap_add:
      - IPC_LOCK
    command: [ "vault", "write", "database/config/template",
               "plugin_name=postgresql-database-plugin",
               "allowed_roles=*",
               "connection_url=postgresql://{{username}}:{{password}}@postgres:5432/template?sslmode=disable",
               "username=templateuser",
               "password=templatepassword" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_database_enabler

  vault_database_role:
    image: vault:1.7.3
    container_name: vault_database_role
    cap_add:
      - IPC_LOCK
    command: [ "vault", "write", "database/roles/order", "db_name=template", "creation_statements=CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO \"{{name}}\"; GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"{{name}}\";", "default_ttl=1h", "max_ttl=24h" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_database_connection

  vault_database_transit:
    image: vault:1.7.3
    container_name: vault_database_transit
    cap_add:
      - IPC_LOCK
    command: [ "vault", "secrets", "enable", "transit" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_database_role

  vault_database_key_transit_order:
    image: vault:1.7.3
    container_name: vault_database_key_transit_order
    cap_add:
      - IPC_LOCK
    command: [ "vault", "write", "-f", "transit/keys/order" ]
    environment:
      - VAULT_ADDR=http://vault:8300
      - VAULT_TOKEN=token123
    networks:
      - 'postgres'
    depends_on:
      - vault_database_transit

networks:
  kafka:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  postgres-data: